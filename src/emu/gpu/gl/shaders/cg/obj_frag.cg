uniform sampler2D oamTex : TEXUNIT0;
uniform sampler2D objTex : TEXUNIT1;
uniform sampler2D palTex : TEXUNIT2;

float3 in objPos : TEXCOORD0;

uniform ObjUbo {
    int mapWidths[128];
    int objBounds[128];
} ObjUbo : BUFFER[0];

short readOam16Aligned(short addr) {
    float x = float(addr >> 2) / 255.0f;
    float4 value = tex2D(oamTex, float2(x, 1.0));
    short entry = addr & 2;
    return short(value[entry] * 255.0) | (short(value[entry + 1] * 255.0) << 8);
}

short readObj8(int addr) {
    short addrX = (addr >> 2) & 0x1FF;
    short addrY = addr >> 11;
    float x = float(addrX) / 511.0f;
    float y = float(addrY) / (OBJ_TEX_HEIGHT - 1.0);
    return int(tex2D(objTex, float2(x, y))[addr & 3] * 255.0);
}

float4 readPal(short index) {
    return tex2D(palTex, float2(float(index) / 511.0, 1.0));
}

void main(out float4 color : COLOR) {
    short oamIndex = short(objPos.z);
    short mapWidth = short(ObjUbo.mapWidths[oamIndex]);
    short objBound = short(ObjUbo.objBounds[oamIndex]);

    short attrib2 = readOam16Aligned(oamIndex * 8 + 4);
    int tileIndex = attrib2 & 0x3FF;
    int tileAddr = tileIndex * objBound;

    int palBank = (attrib2 >> 12) & 0xF;
    int palBase = 0x100 + palBank * 16;

    short objY = short(objPos.y);
    short objX = short(objPos.x);

    tileAddr += ((objY & 7) + (objY >> 3) * mapWidth) * 4;
    tileAddr += (objX >> 3) * 32 + (objX & 7) / 2;

    short palIndex = readObj8(tileAddr);
    palIndex >>= 4 * (objX & 1);
    palIndex &= 0xF;
    if (palIndex == 0) {
        discard;
    }

    color = float4(readPal(palBase + palIndex).rgb, 1.0);
}
