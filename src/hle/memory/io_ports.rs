use crate::hle::cpu_regs::CpuRegs;
use crate::hle::gpu::gpu_context::GpuContext;
use crate::hle::ipc_handler::IpcHandler;
use crate::hle::memory::dma::Dma;
use crate::hle::memory::memory::Memory;
use crate::hle::memory::Convert;
use crate::hle::spi_context::SpiContext;
use crate::hle::spu_context::SpuContext;
use crate::hle::timers_context::TimersContext;
use crate::hle::CpuType;
use crate::logging::debug_println;
use crate::DEBUG;
use dspsv_macros::{io_ports_read, io_ports_write};
use std::cell::RefCell;
use std::mem;
use std::rc::Rc;
use std::sync::{Arc, RwLock};

pub struct IoPorts {
    cpu_type: CpuType,
    memory: Arc<RwLock<Memory>>,
    spi_context: Arc<RwLock<SpiContext>>,
    ipc_handler: Arc<RwLock<IpcHandler>>,
    cpu_regs: Rc<RefCell<CpuRegs>>,
    gpu_context: Rc<RefCell<GpuContext>>,
    spu_context: Rc<RefCell<SpuContext>>,
    pub dma: Arc<RefCell<Dma>>,
    timers_context: Rc<RefCell<TimersContext>>,
}

impl IoPorts {
    pub fn new(
        cpu_type: CpuType,
        memory: Arc<RwLock<Memory>>,
        spi_context: Arc<RwLock<SpiContext>>,
        ipc_handler: Arc<RwLock<IpcHandler>>,
        cpu_regs: Rc<RefCell<CpuRegs>>,
        gpu_context: Rc<RefCell<GpuContext>>,
        spu_context: Rc<RefCell<SpuContext>>,
        dma: Arc<RefCell<Dma>>,
        timers_context: Rc<RefCell<TimersContext>>,
    ) -> Self {
        IoPorts {
            cpu_type,
            memory,
            ipc_handler,
            spi_context,
            cpu_regs,
            gpu_context,
            spu_context,
            dma,
            timers_context,
        }
    }

    pub fn read<T: Convert>(&self, addr_offset: u32) -> T {
        debug_println!(
            "{:?} io port read at {:x} with size {:x}",
            self.cpu_type,
            addr_offset,
            mem::size_of::<T>()
        );
        let ret: T = match self.cpu_type {
            CpuType::ARM9 => self.read_arm9(addr_offset),
            CpuType::ARM7 => self.read_arm7(addr_offset),
        };
        debug_println!(
            "{:?} io port read at {:x} with value {:x} with size {:x}",
            self.cpu_type,
            addr_offset,
            ret.into(),
            mem::size_of::<T>()
        );
        ret
    }

    fn read_arm7<T: Convert>(&self, addr_offset: u32) -> T {
        /*
         * Use moving windows to handle reads and writes
         * |0|0|0|  x  |   x   |   x   |   x   |0|0|0|
         *         addr   + 1     + 2     + 3
         */
        let mut bytes_window = [0u8; 10];

        let mut addr_offset_tmp = addr_offset;
        let mut index = 3usize;
        while (index - 3) < mem::size_of::<T>() {
            #[rustfmt::skip]
            io_ports_read!(match addr_offset + (index - 3) as u32 {
                io16(0x4) => todo!(),
                io16(0x6) => todo!(),
                io32(0xB0) => todo!(),
                io32(0xB4) => todo!(),
                io32(0xB8) => todo!(),
                io32(0xBC) => todo!(),
                io32(0xC0) => todo!(),
                io32(0xC4) => todo!(),
                io32(0xC8) => todo!(),
                io32(0xCC) => todo!(),
                io32(0xD0) => todo!(),
                io32(0xD4) => todo!(),
                io32(0xD8) => todo!(),
                io32(0xDC) => self.dma.borrow().get_cnt(3),
                io16(0x100) => todo!(),
                io16(0x102) => todo!(),
                io16(0x104) => todo!(),
                io16(0x106) => todo!(),
                io16(0x108) => todo!(),
                io16(0x10A) => todo!(),
                io16(0x10C) => todo!(),
                io16(0x10E) => todo!(),
                io16(0x130) => todo!(),
                io16(0x136) => todo!(),
                io8(0x138) => todo!(),
                io16(0x180) => self.ipc_handler.read().unwrap().get_sync_reg(CpuType::ARM7),
                io16(0x184) => todo!(),
                io16(0x1A0) => todo!(),
                io8(0x1A2) => todo!(),
                io32(0x1A4) => todo!(),
                io16(0x1C0) => self.spi_context.read().unwrap().cnt,
                io8(0x1C2) => self.spi_context.read().unwrap().data,
                io8(0x208) => self.cpu_regs.borrow().ime,
                io32(0x210) => todo!(),
                io32(0x214) => todo!(),
                io8(0x240) => todo!(),
                io8(0x241) => todo!(),
                io8(0x300) => todo!(),
                io8(0x301) => todo!(),
                io32(0x400) => todo!(),
                io32(0x410) => todo!(),
                io32(0x420) => todo!(),
                io32(0x430) => todo!(),
                io32(0x440) => todo!(),
                io32(0x450) => todo!(),
                io32(0x460) => todo!(),
                io32(0x470) => todo!(),
                io32(0x480) => todo!(),
                io32(0x490) => todo!(),
                io32(0x4A0) => todo!(),
                io32(0x4B0) => todo!(),
                io32(0x4C0) => todo!(),
                io32(0x4D0) => todo!(),
                io32(0x4E0) => todo!(),
                io32(0x4F0) => todo!(),
                io16(0x500) => self.spu_context.borrow().main_sound_cnt,
                io16(0x504) => todo!(),
                io8(0x508) => todo!(),
                io8(0x509) => todo!(),
                io32(0x510) => todo!(),
                io32(0x518) => todo!(),
                io32(0x100000) => todo!(),
                io32(0x100010) => todo!(),
                io16(0x800006) => todo!(),
                io16(0x800010) => todo!(),
                io16(0x800012) => todo!(),
                io16(0x800018) => todo!(),
                io16(0x80001A) => todo!(),
                io16(0x80001C) => todo!(),
                io16(0x800020) => todo!(),
                io16(0x800022) => todo!(),
                io16(0x800024) => todo!(),
                io16(0x80002A) => todo!(),
                io16(0x800030) => todo!(),
                io16(0x80003C) => todo!(),
                io16(0x800040) => todo!(),
                io16(0x800050) => todo!(),
                io16(0x800052) => todo!(),
                io16(0x800054) => todo!(),
                io16(0x800056) => todo!(),
                io16(0x800058) => todo!(),
                io16(0x80005A) => todo!(),
                io16(0x80005C) => todo!(),
                io16(0x800060) => todo!(),
                io16(0x800062) => todo!(),
                io16(0x800064) => todo!(),
                io16(0x800068) => todo!(),
                io16(0x80006C) => todo!(),
                io16(0x800074) => todo!(),
                io16(0x800076) => todo!(),
                io16(0x800080) => todo!(),
                io16(0x80008C) => todo!(),
                io16(0x800090) => todo!(),
                io16(0x8000A0) => todo!(),
                io16(0x8000A4) => todo!(),
                io16(0x8000A8) => todo!(),
                io16(0x8000B0) => todo!(),
                io16(0x8000E8) => todo!(),
                io16(0x8000EA) => todo!(),
                io16(0x800110) => todo!(),
                io16(0x80011C) => todo!(),
                io16(0x800120) => todo!(),
                io16(0x800122) => todo!(),
                io16(0x800124) => todo!(),
                io16(0x800128) => todo!(),
                io16(0x800130) => todo!(),
                io16(0x800132) => todo!(),
                io16(0x800134) => todo!(),
                io16(0x800140) => todo!(),
                io16(0x800142) => todo!(),
                io16(0x800144) => todo!(),
                io16(0x800146) => todo!(),
                io16(0x800148) => todo!(),
                io16(0x80014A) => todo!(),
                io16(0x80014C) => todo!(),
                io16(0x800150) => todo!(),
                io16(0x800154) => todo!(),
                io16(0x80015C) => todo!(),
                _ => {
                    if DEBUG && index == 3 {
                        debug_println!(
                            "{:?} unknown io port read at {:x}",
                            CpuType::ARM7,
                            addr_offset
                        );
                    }

                    bytes_window[index] = 0;
                }
            });
            index += 1;
        }
        T::from(u32::from_le_bytes([
            bytes_window[3],
            bytes_window[4],
            bytes_window[5],
            bytes_window[6],
        ]))
    }

    fn read_arm9<T: Convert>(&self, addr_offset: u32) -> T {
        /*
         * Use moving windows to handle reads and writes
         * |0|0|0|  x  |   x   |   x   |   x   |0|0|0|
         *         addr   + 1     + 2     + 3
         */
        let mut bytes_window = [0u8; 10];

        let mut addr_offset_tmp = addr_offset;
        let mut index = 3usize;
        while (index - 3) < mem::size_of::<T>() {
            #[rustfmt::skip]
            io_ports_read!(match addr_offset + (index - 3) as u32 {
                io32(0x0) => todo!(),
                io16(0x4) => todo!(),
                io16(0x6) => todo!(),
                io16(0x8) => todo!(),
                io16(0xA) => todo!(),
                io16(0xC) => todo!(),
                io16(0xE) => todo!(),
                io16(0x48) => todo!(),
                io16(0x4A) => todo!(),
                io16(0x50) => todo!(),
                io16(0x52) => todo!(),
                io16(0x60) => todo!(),
                io32(0x64) => todo!(),
                io16(0x6C) => todo!(),
                io32(0xB0) => todo!(),
                io32(0xB4) => todo!(),
                io32(0xB8) => todo!(),
                io32(0xBC) => todo!(),
                io32(0xC0) => todo!(),
                io32(0xC4) => todo!(),
                io32(0xC8) => todo!(),
                io32(0xCC) => todo!(),
                io32(0xD0) => todo!(),
                io32(0xD4) => todo!(),
                io32(0xD8) => todo!(),
                io32(0xDC) => todo!(),
                io32(0xE0) => todo!(),
                io32(0xE4) => todo!(),
                io32(0xE8) => todo!(),
                io32(0xEC) => todo!(),
                io16(0x100) => todo!(),
                io16(0x102) => todo!(),
                io16(0x104) => todo!(),
                io16(0x106) => todo!(),
                io16(0x108) => todo!(),
                io16(0x10A) => todo!(),
                io16(0x10C) => todo!(),
                io16(0x10E) => todo!(),
                io16(0x130) => todo!(),
                io16(0x180) => self.ipc_handler.read().unwrap().get_sync_reg(CpuType::ARM9),
                io16(0x184) => todo!(),
                io16(0x1A0) => todo!(),
                io8(0x1A2) => todo!(),
                io32(0x1A4) => todo!(),
                io8(0x208) => todo!(),
                io32(0x210) => todo!(),
                io32(0x214) => todo!(),
                io8(0x240) => todo!(),
                io8(0x241) => todo!(),
                io8(0x242) => todo!(),
                io8(0x243) => todo!(),
                io8(0x244) => todo!(),
                io8(0x245) => todo!(),
                io8(0x246) => todo!(),
                io8(0x247) => todo!(),
                io8(0x248) => todo!(),
                io8(0x249) => todo!(),
                io16(0x280) => todo!(),
                io32(0x290) => todo!(),
                io32(0x294) => todo!(),
                io32(0x298) => todo!(),
                io32(0x29C) => todo!(),
                io32(0x2A0) => todo!(),
                io32(0x2A4) => todo!(),
                io32(0x2A8) => todo!(),
                io32(0x2AC) => todo!(),
                io16(0x2B0) => todo!(),
                io32(0x2B4) => todo!(),
                io32(0x2B8) => todo!(),
                io32(0x2BC) => todo!(),
                io8(0x300) => todo!(),
                io16(0x304) => todo!(),
                io32(0x600) => todo!(),
                io32(0x604) => todo!(),
                io32(0x620) => todo!(),
                io32(0x624) => todo!(),
                io32(0x628) => todo!(),
                io32(0x62C) => todo!(),
                io16(0x630) => todo!(),
                io16(0x632) => todo!(),
                io16(0x634) => todo!(),
                io32(0x640) => todo!(),
                io32(0x644) => todo!(),
                io32(0x648) => todo!(),
                io32(0x64C) => todo!(),
                io32(0x650) => todo!(),
                io32(0x654) => todo!(),
                io32(0x658) => todo!(),
                io32(0x65C) => todo!(),
                io32(0x660) => todo!(),
                io32(0x664) => todo!(),
                io32(0x668) => todo!(),
                io32(0x66C) => todo!(),
                io32(0x670) => todo!(),
                io32(0x674) => todo!(),
                io32(0x678) => todo!(),
                io32(0x67C) => todo!(),
                io32(0x680) => todo!(),
                io32(0x684) => todo!(),
                io32(0x688) => todo!(),
                io32(0x68C) => todo!(),
                io32(0x690) => todo!(),
                io32(0x694) => todo!(),
                io32(0x698) => todo!(),
                io32(0x69C) => todo!(),
                io32(0x6A0) => todo!(),
                io32(0x1000) => todo!(),
                io16(0x1008) => todo!(),
                io16(0x100A) => todo!(),
                io16(0x100C) => todo!(),
                io16(0x100E) => todo!(),
                io16(0x1048) => todo!(),
                io16(0x104A) => todo!(),
                io16(0x1050) => todo!(),
                io16(0x1052) => todo!(),
                io16(0x106C) => todo!(),
                io32(0x100000) => todo!(),
                io32(0x100010) => todo!(),
                _ => {
                    if DEBUG && index == 3 {
                        debug_println!(
                            "{:?} unknown io port read at {:x}",
                            CpuType::ARM9,
                            addr_offset
                        );
                    }

                    bytes_window[index] = 0;
                }
            });
            index += 1;
        }
        T::from(u32::from_le_bytes([
            bytes_window[3],
            bytes_window[4],
            bytes_window[5],
            bytes_window[6],
        ]))
    }

    pub fn write<T: Convert>(&self, addr_offset: u32, value: T) {
        debug_println!(
            "{:?} io port write at {:x} with value {:x} and size {:x}",
            self.cpu_type,
            addr_offset,
            value.into(),
            mem::size_of::<T>()
        );
        match self.cpu_type {
            CpuType::ARM9 => self.write_arm9(addr_offset, value),
            CpuType::ARM7 => self.write_arm7(addr_offset, value),
        }
    }

    fn write_arm7<T: Convert>(&self, addr_offset: u32, value: T) {
        let value_array = [value];
        let (_, bytes, _) = unsafe { value_array.align_to::<u8>() };
        /*
         * Use moving windows to handle reads and writes
         * |0|0|0|  x  |   x   |   x   |   x   |0|0|0|
         *         addr   + 1     + 2     + 3
         */
        let mut bytes_window = [0u8; 10];
        let mut mask_window = [0u8; 10];
        bytes_window[3..3 + mem::size_of::<T>()].copy_from_slice(bytes);
        mask_window[3..3 + mem::size_of::<T>()].fill(0xFF);

        let mut addr_offset_tmp = addr_offset;
        let mut index = 3usize;
        while (index - 3) < bytes.len() {
            #[rustfmt::skip]
            io_ports_write!(match addr_offset + (index - 3) as u32 {
                io16(0x4) => todo!(),
                io32(0xB0) => todo!(),
                io32(0xB4) => todo!(),
                io32(0xB8) => todo!(),
                io32(0xBC) => todo!(),
                io32(0xC0) => todo!(),
                io32(0xC4) => todo!(),
                io32(0xC8) => todo!(),
                io32(0xCC) => todo!(),
                io32(0xD0) => todo!(),
                io32(0xD4) => self.dma.borrow_mut().set_sad(3, mask, value),
                io32(0xD8) => self.dma.borrow_mut().set_dad(3, mask, value),
                io32(0xDC) => self.dma.borrow_mut().set_cnt(3, mask, value),
                io16(0x100) => todo!(),
                io16(0x102) => todo!(),
                io16(0x104) => todo!(),
                io16(0x106) => todo!(),
                io16(0x108) => todo!(),
                io16(0x10A) => todo!(),
                io16(0x10C) => todo!(),
                io16(0x10E) => todo!(),
                io8(0x138) => todo!(),
                io16(0x180) => self.ipc_handler.write().unwrap().set_sync_reg(CpuType::ARM7, mask, value),
                io16(0x184) => todo!(),
                io32(0x188) => todo!(),
                io16(0x1A0) => todo!(),
                io8(0x1A2) => todo!(),
                io32(0x1A4) => todo!(),
                io32(0x1A8) => todo!(),
                io32(0x1AC) => todo!(),
                io16(0x1C0) => self.spi_context.write().unwrap().set_cnt(mask, value),
                io8(0x1C2) => self.spi_context.write().unwrap().set_data(value),
                io8(0x208) => self.cpu_regs.borrow_mut().set_ime(value),
                io32(0x210) => todo!(),
                io32(0x214) => todo!(),
                io8(0x300) => self.cpu_regs.borrow_mut().set_post_flg(value),
                io8(0x301) => todo!(),
                io32(0x400) => self.spu_context.borrow_mut().set_cnt(0, mask, value),
                io32(0x404) => self.spu_context.borrow_mut().set_sad(0, mask, value),
                io16(0x408) => self.spu_context.borrow_mut().set_tmr(0, mask, value),
                io16(0x40A) => self.spu_context.borrow_mut().set_pnt(0, mask, value),
                io32(0x40C) => self.spu_context.borrow_mut().set_len(0, mask, value),
                io32(0x410) => self.spu_context.borrow_mut().set_cnt(1, mask, value),
                io32(0x414) => self.spu_context.borrow_mut().set_sad(1, mask, value),
                io16(0x418) => self.spu_context.borrow_mut().set_tmr(1, mask, value),
                io16(0x41A) => self.spu_context.borrow_mut().set_pnt(1, mask, value),
                io32(0x41C) => self.spu_context.borrow_mut().set_len(1, mask, value),
                io32(0x420) => self.spu_context.borrow_mut().set_cnt(2, mask, value),
                io32(0x424) => self.spu_context.borrow_mut().set_sad(2, mask, value),
                io16(0x428) => self.spu_context.borrow_mut().set_tmr(2, mask, value),
                io16(0x42A) => self.spu_context.borrow_mut().set_pnt(2, mask, value),
                io32(0x42C) => self.spu_context.borrow_mut().set_len(2, mask, value),
                io32(0x430) => self.spu_context.borrow_mut().set_cnt(3, mask, value),
                io32(0x434) => self.spu_context.borrow_mut().set_sad(3, mask, value),
                io16(0x438) => self.spu_context.borrow_mut().set_tmr(3, mask, value),
                io16(0x43A) => self.spu_context.borrow_mut().set_pnt(3, mask, value),
                io32(0x43C) => self.spu_context.borrow_mut().set_len(3, mask, value),
                io32(0x440) => self.spu_context.borrow_mut().set_cnt(4, mask, value),
                io32(0x444) => self.spu_context.borrow_mut().set_sad(4, mask, value),
                io16(0x448) => self.spu_context.borrow_mut().set_tmr(4, mask, value),
                io16(0x44A) => self.spu_context.borrow_mut().set_pnt(4, mask, value),
                io32(0x44C) => self.spu_context.borrow_mut().set_len(4, mask, value),
                io32(0x450) => self.spu_context.borrow_mut().set_cnt(5, mask, value),
                io32(0x454) => self.spu_context.borrow_mut().set_sad(5, mask, value),
                io16(0x458) => self.spu_context.borrow_mut().set_tmr(5, mask, value),
                io16(0x45A) => self.spu_context.borrow_mut().set_pnt(5, mask, value),
                io32(0x45C) => self.spu_context.borrow_mut().set_len(5, mask, value),
                io32(0x460) => self.spu_context.borrow_mut().set_cnt(6, mask, value),
                io32(0x464) => self.spu_context.borrow_mut().set_sad(6, mask, value),
                io16(0x468) => self.spu_context.borrow_mut().set_tmr(6, mask, value),
                io16(0x46A) => self.spu_context.borrow_mut().set_pnt(6, mask, value),
                io32(0x46C) => self.spu_context.borrow_mut().set_len(6, mask, value),
                io32(0x470) => self.spu_context.borrow_mut().set_cnt(7, mask, value),
                io32(0x474) => self.spu_context.borrow_mut().set_sad(7, mask, value),
                io16(0x478) => self.spu_context.borrow_mut().set_tmr(7, mask, value),
                io16(0x47A) => self.spu_context.borrow_mut().set_pnt(7, mask, value),
                io32(0x47C) => self.spu_context.borrow_mut().set_len(7, mask, value),
                io32(0x480) => self.spu_context.borrow_mut().set_cnt(8, mask, value),
                io32(0x484) => self.spu_context.borrow_mut().set_sad(8, mask, value),
                io16(0x488) => self.spu_context.borrow_mut().set_tmr(8, mask, value),
                io16(0x48A) => self.spu_context.borrow_mut().set_pnt(8, mask, value),
                io32(0x48C) => self.spu_context.borrow_mut().set_len(8, mask, value),
                io32(0x490) => self.spu_context.borrow_mut().set_cnt(9, mask, value),
                io32(0x494) => self.spu_context.borrow_mut().set_sad(9, mask, value),
                io16(0x498) => self.spu_context.borrow_mut().set_tmr(9, mask, value),
                io16(0x49A) => self.spu_context.borrow_mut().set_pnt(9, mask, value),
                io32(0x49C) => self.spu_context.borrow_mut().set_len(9, mask, value),
                io32(0x4A0) => self.spu_context.borrow_mut().set_cnt(10, mask, value),
                io32(0x4A4) => self.spu_context.borrow_mut().set_sad(10, mask, value),
                io16(0x4A8) => self.spu_context.borrow_mut().set_tmr(10, mask, value),
                io16(0x4AA) => self.spu_context.borrow_mut().set_pnt(10, mask, value),
                io32(0x4AC) => self.spu_context.borrow_mut().set_len(10, mask, value),
                io32(0x4B0) => self.spu_context.borrow_mut().set_cnt(11, mask, value),
                io32(0x4B4) => self.spu_context.borrow_mut().set_sad(11, mask, value),
                io16(0x4B8) => self.spu_context.borrow_mut().set_tmr(11, mask, value),
                io16(0x4BA) => self.spu_context.borrow_mut().set_pnt(11, mask, value),
                io32(0x4BC) => self.spu_context.borrow_mut().set_len(11, mask, value),
                io32(0x4C0) => self.spu_context.borrow_mut().set_cnt(12, mask, value),
                io32(0x4C4) => self.spu_context.borrow_mut().set_sad(12, mask, value),
                io16(0x4C8) => self.spu_context.borrow_mut().set_tmr(12, mask, value),
                io16(0x4CA) => self.spu_context.borrow_mut().set_pnt(12, mask, value),
                io32(0x4CC) => self.spu_context.borrow_mut().set_len(12, mask, value),
                io32(0x4D0) => self.spu_context.borrow_mut().set_cnt(13, mask, value),
                io32(0x4D4) => self.spu_context.borrow_mut().set_sad(13, mask, value),
                io16(0x4D8) => self.spu_context.borrow_mut().set_tmr(13, mask, value),
                io16(0x4DA) => self.spu_context.borrow_mut().set_pnt(13, mask, value),
                io32(0x4DC) => self.spu_context.borrow_mut().set_len(13, mask, value),
                io32(0x4E0) => self.spu_context.borrow_mut().set_cnt(14, mask, value),
                io32(0x4E4) => self.spu_context.borrow_mut().set_sad(14, mask, value),
                io16(0x4E8) => self.spu_context.borrow_mut().set_tmr(14, mask, value),
                io16(0x4EA) => self.spu_context.borrow_mut().set_pnt(14, mask, value),
                io32(0x4EC) => self.spu_context.borrow_mut().set_len(14, mask, value),
                io32(0x4F0) => self.spu_context.borrow_mut().set_cnt(15, mask, value),
                io32(0x4F4) => self.spu_context.borrow_mut().set_sad(15, mask, value),
                io16(0x4F8) => self.spu_context.borrow_mut().set_tmr(15, mask, value),
                io16(0x4FA) => self.spu_context.borrow_mut().set_pnt(15, mask, value),
                io32(0x4FC) => self.spu_context.borrow_mut().set_len(15, mask, value),
                io16(0x500) => self.spu_context.borrow_mut().set_main_sound_cnt(mask, value),
                io16(0x504) => self.spu_context.borrow_mut().set_sound_bias(mask, value),
                io8(0x508) => todo!(),
                io8(0x509) => todo!(),
                io32(0x510) => todo!(),
                io16(0x514) => todo!(),
                io32(0x518) => todo!(),
                io16(0x51C) => todo!(),
                io16(0x800006) => todo!(),
                io16(0x800010) => todo!(),
                io16(0x800012) => todo!(),
                io16(0x800018) => todo!(),
                io16(0x80001A) => todo!(),
                io16(0x80001C) => todo!(),
                io16(0x800020) => todo!(),
                io16(0x800022) => todo!(),
                io16(0x800024) => todo!(),
                io16(0x80002A) => todo!(),
                io16(0x800030) => todo!(),
                io16(0x80003C) => todo!(),
                io16(0x800040) => todo!(),
                io16(0x800050) => todo!(),
                io16(0x800052) => todo!(),
                io16(0x800056) => todo!(),
                io16(0x800058) => todo!(),
                io16(0x80005A) => todo!(),
                io16(0x80005C) => todo!(),
                io16(0x800062) => todo!(),
                io16(0x800064) => todo!(),
                io16(0x800068) => todo!(),
                io16(0x80006C) => todo!(),
                io16(0x800070) => todo!(),
                io16(0x800074) => todo!(),
                io16(0x800076) => todo!(),
                io16(0x800080) => todo!(),
                io16(0x80008C) => todo!(),
                io16(0x800090) => todo!(),
                io16(0x8000A0) => todo!(),
                io16(0x8000A4) => todo!(),
                io16(0x8000A8) => todo!(),
                io16(0x8000AC) => todo!(),
                io16(0x8000AE) => todo!(),
                io16(0x8000E8) => todo!(),
                io16(0x8000EA) => todo!(),
                io16(0x800110) => todo!(),
                io16(0x80011C) => todo!(),
                io16(0x800120) => todo!(),
                io16(0x800122) => todo!(),
                io16(0x800124) => todo!(),
                io16(0x800128) => todo!(),
                io16(0x800130) => todo!(),
                io16(0x800132) => todo!(),
                io16(0x800134) => todo!(),
                io16(0x800140) => todo!(),
                io16(0x800142) => todo!(),
                io16(0x800144) => todo!(),
                io16(0x800146) => todo!(),
                io16(0x800148) => todo!(),
                io16(0x80014A) => todo!(),
                io16(0x80014C) => todo!(),
                io16(0x800150) => todo!(),
                io16(0x800154) => todo!(),
                io16(0x800158) => todo!(),
                io16(0x80015A) => todo!(),
                io16(0x80021C) => todo!(),
                _ => {
                    if DEBUG && index == 3 {
                        debug_println!(
                            "{:?} unknown io port write at {:x} with value {:x}",
                            CpuType::ARM7,
                            addr_offset,
                            value.into()
                        );
                    }
                }
            });
            index += 1;
        }
    }

    fn write_arm9<T: Convert>(&self, addr_offset: u32, value: T) {
        let value_array = [value];
        let (_, bytes, _) = unsafe { value_array.align_to::<u8>() };
        /*
         * Use moving windows to handle reads and writes
         * |0|0|0|  x  |   x   |   x   |   x   |0|0|0|
         *         addr   + 1     + 2     + 3
         */
        let mut bytes_window = [0u8; 10];
        let mut mask_window = [0u8; 10];
        bytes_window[3..3 + mem::size_of::<T>()].copy_from_slice(bytes);
        mask_window[3..3 + mem::size_of::<T>()].fill(0xFF);

        let mut addr_offset_tmp = addr_offset;
        let mut index = 3usize;
        while (index - 3) < bytes.len() {
            #[rustfmt::skip]
            io_ports_write!(match addr_offset + (index - 3) as u32 {
                io32(0x0) => todo!(),
                io16(0x4) => todo!(),
                io16(0x8) => todo!(),
                io16(0xA) => todo!(),
                io16(0xC) => todo!(),
                io16(0xE) => todo!(),
                io16(0x10) => todo!(),
                io16(0x12) => todo!(),
                io16(0x14) => todo!(),
                io16(0x16) => todo!(),
                io16(0x18) => todo!(),
                io16(0x1A) => todo!(),
                io16(0x1C) => todo!(),
                io16(0x1E) => todo!(),
                io16(0x20) => todo!(),
                io16(0x22) => todo!(),
                io16(0x24) => todo!(),
                io16(0x26) => todo!(),
                io32(0x28) => todo!(),
                io32(0x2C) => todo!(),
                io16(0x30) => todo!(),
                io16(0x32) => todo!(),
                io16(0x34) => todo!(),
                io16(0x36) => todo!(),
                io32(0x38) => todo!(),
                io32(0x3C) => todo!(),
                io16(0x40) => todo!(),
                io16(0x42) => todo!(),
                io16(0x44) => todo!(),
                io16(0x46) => todo!(),
                io16(0x48) => todo!(),
                io16(0x4A) => todo!(),
                io16(0x4C) => todo!(),
                io16(0x50) => todo!(),
                io16(0x52) => todo!(),
                io8(0x54) => todo!(),
                io16(0x60) => todo!(),
                io32(0x64) => todo!(),
                io16(0x6C) => todo!(),
                io32(0xB0) => self.dma.borrow_mut().set_sad(0, mask, value),
                io32(0xB4) => self.dma.borrow_mut().set_dad(0, mask, value),
                io32(0xB8) => self.dma.borrow_mut().set_cnt(0, mask, value),
                io32(0xBC) => todo!(),
                io32(0xC0) => todo!(),
                io32(0xC4) => todo!(),
                io32(0xC8) => todo!(),
                io32(0xCC) => todo!(),
                io32(0xD0) => todo!(),
                io32(0xD4) => todo!(),
                io32(0xD8) => todo!(),
                io32(0xDC) => todo!(),
                io32(0xE0) => todo!(),
                io32(0xE4) => todo!(),
                io32(0xE8) => todo!(),
                io32(0xEC) => todo!(),
                io16(0x100) => todo!(),
                io16(0x102) => self.timers_context.borrow_mut().set_cnt_h(0, mask, value),
                io16(0x104) => todo!(),
                io16(0x106) => todo!(),
                io16(0x108) => todo!(),
                io16(0x10A) => todo!(),
                io16(0x10C) => todo!(),
                io16(0x10E) => todo!(),
                io16(0x180) => self.ipc_handler.write().unwrap().set_sync_reg(CpuType::ARM9, mask, value),
                io16(0x184) => todo!(),
                io32(0x188) => todo!(),
                io16(0x1A0) => todo!(),
                io8(0x1A2) => todo!(),
                io32(0x1A4) => todo!(),
                io32(0x1A8) => todo!(),
                io32(0x1AC) => todo!(),
                io8(0x208) => self.cpu_regs.borrow_mut().set_ime(value),
                io32(0x210) => todo!(),
                io32(0x214) => todo!(),
                io8(0x240) => todo!(),
                io8(0x241) => todo!(),
                io8(0x242) => todo!(),
                io8(0x243) => todo!(),
                io8(0x244) => todo!(),
                io8(0x245) => todo!(),
                io8(0x246) => todo!(),
                io8(0x247) => self.memory.write().unwrap().set_wram_cnt(value),
                io8(0x248) => todo!(),
                io8(0x249) => todo!(),
                io16(0x280) => todo!(),
                io32(0x290) => todo!(),
                io32(0x294) => todo!(),
                io32(0x298) => todo!(),
                io32(0x29C) => todo!(),
                io16(0x2B0) => todo!(),
                io32(0x2B8) => todo!(),
                io32(0x2BC) => todo!(),
                io8(0x300) => self.cpu_regs.borrow_mut().set_post_flg(value),
                io16(0x304) => self.gpu_context.borrow_mut().set_pow_cnt1(mask, value),
                io16(0x330) => todo!(),
                io16(0x332) => todo!(),
                io16(0x334) => todo!(),
                io16(0x336) => todo!(),
                io16(0x338) => todo!(),
                io16(0x33A) => todo!(),
                io16(0x33C) => todo!(),
                io16(0x33E) => todo!(),
                io32(0x350) => todo!(),
                io16(0x354) => todo!(),
                io32(0x358) => todo!(),
                io16(0x35C) => todo!(),
                io8(0x360) => todo!(),
                io8(0x361) => todo!(),
                io8(0x362) => todo!(),
                io8(0x363) => todo!(),
                io8(0x364) => todo!(),
                io8(0x365) => todo!(),
                io8(0x366) => todo!(),
                io8(0x367) => todo!(),
                io8(0x368) => todo!(),
                io8(0x369) => todo!(),
                io8(0x36A) => todo!(),
                io8(0x36B) => todo!(),
                io8(0x36C) => todo!(),
                io8(0x36D) => todo!(),
                io8(0x36E) => todo!(),
                io8(0x36F) => todo!(),
                io8(0x370) => todo!(),
                io8(0x371) => todo!(),
                io8(0x372) => todo!(),
                io8(0x373) => todo!(),
                io8(0x374) => todo!(),
                io8(0x375) => todo!(),
                io8(0x376) => todo!(),
                io8(0x377) => todo!(),
                io8(0x378) => todo!(),
                io8(0x379) => todo!(),
                io8(0x37A) => todo!(),
                io8(0x37B) => todo!(),
                io8(0x37C) => todo!(),
                io8(0x37D) => todo!(),
                io8(0x37E) => todo!(),
                io8(0x37F) => todo!(),
                io16(0x380) => todo!(),
                io16(0x382) => todo!(),
                io16(0x384) => todo!(),
                io16(0x386) => todo!(),
                io16(0x388) => todo!(),
                io16(0x38A) => todo!(),
                io16(0x38C) => todo!(),
                io16(0x38E) => todo!(),
                io16(0x390) => todo!(),
                io16(0x392) => todo!(),
                io16(0x394) => todo!(),
                io16(0x396) => todo!(),
                io16(0x398) => todo!(),
                io16(0x39A) => todo!(),
                io16(0x39C) => todo!(),
                io16(0x39E) => todo!(),
                io16(0x3A0) => todo!(),
                io16(0x3A2) => todo!(),
                io16(0x3A4) => todo!(),
                io16(0x3A6) => todo!(),
                io16(0x3A8) => todo!(),
                io16(0x3AA) => todo!(),
                io16(0x3AC) => todo!(),
                io16(0x3AE) => todo!(),
                io16(0x3B0) => todo!(),
                io16(0x3B2) => todo!(),
                io16(0x3B4) => todo!(),
                io16(0x3B6) => todo!(),
                io16(0x3B8) => todo!(),
                io16(0x3BA) => todo!(),
                io16(0x3BC) => todo!(),
                io16(0x3BE) => todo!(),
                io32(0x400) => todo!(),
                io32(0x404) => todo!(),
                io32(0x408) => todo!(),
                io32(0x40C) => todo!(),
                io32(0x410) => todo!(),
                io32(0x414) => todo!(),
                io32(0x418) => todo!(),
                io32(0x41C) => todo!(),
                io32(0x420) => todo!(),
                io32(0x424) => todo!(),
                io32(0x428) => todo!(),
                io32(0x42C) => todo!(),
                io32(0x430) => todo!(),
                io32(0x434) => todo!(),
                io32(0x438) => todo!(),
                io32(0x43C) => todo!(),
                io32(0x440) => todo!(),
                io32(0x444) => todo!(),
                io32(0x448) => todo!(),
                io32(0x44C) => todo!(),
                io32(0x450) => todo!(),
                io32(0x454) => todo!(),
                io32(0x458) => todo!(),
                io32(0x45C) => todo!(),
                io32(0x460) => todo!(),
                io32(0x464) => todo!(),
                io32(0x468) => todo!(),
                io32(0x46C) => todo!(),
                io32(0x470) => todo!(),
                io32(0x480) => todo!(),
                io32(0x484) => todo!(),
                io32(0x488) => todo!(),
                io32(0x48C) => todo!(),
                io32(0x490) => todo!(),
                io32(0x494) => todo!(),
                io32(0x498) => todo!(),
                io32(0x49C) => todo!(),
                io32(0x4A0) => todo!(),
                io32(0x4A4) => todo!(),
                io32(0x4A8) => todo!(),
                io32(0x4AC) => todo!(),
                io32(0x4C0) => todo!(),
                io32(0x4C4) => todo!(),
                io32(0x4C8) => todo!(),
                io32(0x4CC) => todo!(),
                io32(0x4D0) => todo!(),
                io32(0x500) => todo!(),
                io32(0x504) => todo!(),
                io32(0x540) => todo!(),
                io32(0x580) => todo!(),
                io32(0x5C0) => todo!(),
                io32(0x5C4) => todo!(),
                io32(0x5C8) => todo!(),
                io32(0x600) => todo!(),
                io32(0x1000) => todo!(),
                io16(0x1008) => todo!(),
                io16(0x100A) => todo!(),
                io16(0x100C) => todo!(),
                io16(0x100E) => todo!(),
                io16(0x1010) => todo!(),
                io16(0x1012) => todo!(),
                io16(0x1014) => todo!(),
                io16(0x1016) => todo!(),
                io16(0x1018) => todo!(),
                io16(0x101A) => todo!(),
                io16(0x101C) => todo!(),
                io16(0x101E) => todo!(),
                io16(0x1020) => todo!(),
                io16(0x1022) => todo!(),
                io16(0x1024) => todo!(),
                io16(0x1026) => todo!(),
                io32(0x1028) => todo!(),
                io32(0x102C) => todo!(),
                io16(0x1030) => todo!(),
                io16(0x1032) => todo!(),
                io16(0x1034) => todo!(),
                io16(0x1036) => todo!(),
                io32(0x1038) => todo!(),
                io32(0x103C) => todo!(),
                io16(0x1040) => todo!(),
                io16(0x1042) => todo!(),
                io16(0x1044) => todo!(),
                io16(0x1046) => todo!(),
                io16(0x1048) => todo!(),
                io16(0x104A) => todo!(),
                io16(0x104C) => todo!(),
                io16(0x1050) => todo!(),
                io16(0x1052) => todo!(),
                io8(0x1054) => todo!(),
                io16(0x106C) => todo!(),
                _ => {
                    if DEBUG && index == 3 {
                        debug_println!(
                            "{:?} unknown io port write at {:x} with value {:x}",
                            CpuType::ARM9,
                            addr_offset,
                            value.into()
                        );
                    }
                }
            });
            index += 1;
        }
    }
}
